#!/bin/bash

set -euf -o pipefail

openshift_deploy() {
  ./scripts/dev push
  make packagemanifests VERSION=0.0.1 CHANNEL=alpha IS_CHANNEL_DEFAULT=1
	sed -i'.original' -e "s|development/gm-operator:0.0.1|internal/gm-operator:latest|" ./packagemanifests/0.0.1/gm-operator.clusterserviceversion.yaml
	rm ./packagemanifests/0.0.1/gm-operator.clusterserviceversion.yaml.original
  operator-sdk run packagemanifests -n gm-operator --version 0.0.1
  rm -rf ./packagemanifests
}

kubernetes_deploy() {
  echo "unimplemented"
}

openshift_cleanup() {
  operator-sdk cleanup -n gm-operator gm-operator
  oc delete clusterrole gm-control
  oc delete pvc gm-redis-append-dir-gm-redis-0
}

kubernetes_cleanup() {
  echo "unimplemented"
}

openshift_upgrade() {
  openshift_cleanup
  openshift_deploy
}

kubernetes_upgrade() {
  echo "unimplemented"
}

openshift_logs() {
  oc logs -n gm-operator $(oc get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs) -c manager -f
}

kubernetes_logs() {
  echo "unimplemented"
}

openshift_sample() {
  oc apply -f config/samples/_v1alpha1_mesh.yaml
  openshift_logs
}

kubernetes_sample() {
  echo "unimplemented"
}

choose() {
  case $1 in
    k*) kubernetes_$2 ;;
    *)  openshift_$2 ;;
  esac
}

if [ $# -lt 1 ]
then
  echo "dev: missing argument"
  exit 1
fi

case $1 in
  deploy)   if [ $# == 2 ]; then choose $2 deploy;  else choose o deploy;   fi ;;
  cleanup)  if [ $# == 2 ]; then choose $2 cleanup; else choose o cleanup;  fi ;;
  upgrade)  if [ $# == 2 ]; then choose $2 upgrade; else choose o upgrade;  fi ;;
  logs)     if [ $# == 2 ]; then choose $2 logs;    else choose o logs;     fi ;;
  sample)   if [ $# == 2 ]; then choose $2 sample;  else choose o sample;   fi ;;

  push)
    make docker-build IMG=docker.greymatter.io/internal/gm-operator:latest
    make docker-push IMG=docker.greymatter.io/internal/gm-operator:latest
    ;;
  *)
    echo "invalid argument $1"
    exit 1
    ;;
esac
