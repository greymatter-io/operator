#!/bin/bash

set -euf -o pipefail

# Openshift

oc_push() {
  make docker-build IMG=docker.greymatter.io/internal/gm-operator:latest
  make docker-push IMG=docker.greymatter.io/internal/gm-operator:latest
}

oc_deploy() {
  prompt_push oc

  make packagemanifests VERSION=0.0.1 CHANNEL=alpha IS_CHANNEL_DEFAULT=1 IMG=docker.greymatter.io/internal/gm-operator:latest
  operator-sdk run packagemanifests -n gm-operator --version 0.0.1
  rm -rf ./packagemanifests

  oc create secret docker-registry gm-docker-secret \
    --docker-server=docker.greymatter.io \
    --docker-username=$NEXUS_USER \
    --docker-password=$NEXUS_PASSWORD \
    --docker-email=$NEXUS_USER \
    -n gm-operator
}

oc_cleanup() {
  operator-sdk cleanup -n gm-operator gm-operator
  oc delete clusterrole gm-control
  oc delete pvc gm-redis-append-dir-gm-redis-0 -n gm-operator-test2
}

oc_upgrade() {
  oc_cleanup
  oc_deploy
}

oc_logs() {
  oc logs -n gm-operator $(oc get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs) -c manager -f
}

oc_sample() {
  oc apply -f hack/sample-openshift.yaml
  oc_logs
}

# Kubernetes

k8s_push() {
  make docker-build IMG=docker.greymatter.io/internal/gm-operator:latest-kops
  make docker-push IMG=docker.greymatter.io/internal/gm-operator:latest-kops
}

k8s_deploy() {
  prompt_push k8s
  k_deploy kops
}

k8s_cleanup() {
  kubectl delete -f hack/k8s-manifests.yaml
  kubectl delete clusterrole gm-control
  kubectl delete pvc gm-redis-append-dir-gm-redis-0 -n default
}

k8s_upgrade() {
  ./scripts/dev push k8s
  kubectl delete pod -n gm-operator $(kubectl get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs)
}

k8s_logs() {
  kubectl logs -n gm-operator $(kubectl get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs) -c manager -f
}

k8s_sample() {
  kubectl apply -f hack/sample-k8s.yaml
  k8s_logs
}

# K3D (local development)
# mostly similar to Kubernetes commamnds, might delete later

k3d_push() {
  make docker-build IMG=docker.greymatter.io/internal/gm-operator:latest-k3d
  k3d image import -c gm-operator docker.greymatter.io/internal/gm-operator:latest-k3d
}

k3d_deploy() {
  prompt_push k3d
  k_deploy k3d
}

k3d_cleanup() {
  kubectl delete -f hack/k8s-manifests.yaml
  kubectl delete clusterrole gm-control
  kubectl delete pvc gm-redis-append-dir-gm-redis-0 -n default
}

k3d_upgrade() {
  ./scripts/dev push k3d
  kubectl delete pod -n gm-operator $(kubectl get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs)
}

k3d_logs() {
  kubectl logs -n gm-operator $(kubectl get pod -n gm-operator -o json | jq -c '.items[] | select(.metadata.name | contains("manager")).metadata.name' | xargs) -c manager -f
}

k3d_sample() {
  kubectl apply -f hack/sample-k8s.yaml
  k3d_logs
}

# Shared

prompt_push() {
  read -p "Build and push a new Docker image? (y/n) " -n 1 -r
  echo ""
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    ./scripts/dev push $1
  fi
}

k_deploy() {
  kubectl apply -f hack/k8s-manifests.yaml

  kubectl create secret docker-registry gm-docker-secret \
  --docker-server=docker.greymatter.io \
  --docker-username=$NEXUS_USER \
  --docker-password=$NEXUS_PASSWORD \
  --docker-email=$NEXUS_USER \
  -n gm-operator
}

choose() {
  case $1 in
    k3*) k3d_$2 ;;
    k8*) k8s_$2 ;;
    o*)  oc_$2 ;;
    *)
      echo "invalid argument $1: expected match with k3*, k8*, or o*."
      exit 1
      ;;
  esac
}

if [ $# -lt 2 ]; then
  echo "dev: expected at least 2 arguments"
  exit 1
fi

case $1 in
  push)     choose $2 push;    ;; 
  deploy)   choose $2 deploy;  ;;
  cleanup)  choose $2 cleanup; ;;
  upgrade)  choose $2 upgrade; ;;
  logs)     choose $2 logs;    ;;
  sample)   choose $2 sample;  ;;
  *)
    echo "invalid argument $1"
    exit 1
    ;;
esac
